#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Haplocheirus
  module TimelineStore
    class Client
      include ::Thrift::Client

      def append(entry, timeline_ids)
        send_append(entry, timeline_ids)
        recv_append()
      end

      def send_append(entry, timeline_ids)
        send_message('append', Append_args, :entry => entry, :timeline_ids => timeline_ids)
      end

      def recv_append()
        result = receive_message(Append_result)
        return
      end

      def remove(entry, timeline_ids)
        send_remove(entry, timeline_ids)
        recv_remove()
      end

      def send_remove(entry, timeline_ids)
        send_message('remove', Remove_args, :entry => entry, :timeline_ids => timeline_ids)
      end

      def recv_remove()
        result = receive_message(Remove_result)
        return
      end

      def get(timeline_id, offset, length)
        send_get(timeline_id, offset, length)
        return recv_get()
      end

      def send_get(timeline_id, offset, length)
        send_message('get', Get_args, :timeline_id => timeline_id, :offset => offset, :length => length)
      end

      def recv_get()
        result = receive_message(Get_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get failed: unknown result')
      end

      def get_range(timeline_id, from_id, to_id)
        send_get_range(timeline_id, from_id, to_id)
        return recv_get_range()
      end

      def send_get_range(timeline_id, from_id, to_id)
        send_message('get_range', Get_range_args, :timeline_id => timeline_id, :from_id => from_id, :to_id => to_id)
      end

      def recv_get_range()
        result = receive_message(Get_range_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_range failed: unknown result')
      end

      def store(timeline_id, entries)
        send_store(timeline_id, entries)
        recv_store()
      end

      def send_store(timeline_id, entries)
        send_message('store', Store_args, :timeline_id => timeline_id, :entries => entries)
      end

      def recv_store()
        result = receive_message(Store_result)
        return
      end

      def merge(timeline_id, entries)
        send_merge(timeline_id, entries)
        recv_merge()
      end

      def send_merge(timeline_id, entries)
        send_message('merge', Merge_args, :timeline_id => timeline_id, :entries => entries)
      end

      def recv_merge()
        result = receive_message(Merge_result)
        return
      end

      def unmerge(timeline_id, entries)
        send_unmerge(timeline_id, entries)
        recv_unmerge()
      end

      def send_unmerge(timeline_id, entries)
        send_message('unmerge', Unmerge_args, :timeline_id => timeline_id, :entries => entries)
      end

      def recv_unmerge()
        result = receive_message(Unmerge_result)
        return
      end

      def delete_timeline(timeline_id)
        send_delete_timeline(timeline_id)
        recv_delete_timeline()
      end

      def send_delete_timeline(timeline_id)
        send_message('delete_timeline', Delete_timeline_args, :timeline_id => timeline_id)
      end

      def recv_delete_timeline()
        result = receive_message(Delete_timeline_result)
        return
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_append(seqid, iprot, oprot)
        args = read_args(iprot, Append_args)
        result = Append_result.new()
        @handler.append(args.entry, args.timeline_ids)
        write_result(result, oprot, 'append', seqid)
      end

      def process_remove(seqid, iprot, oprot)
        args = read_args(iprot, Remove_args)
        result = Remove_result.new()
        @handler.remove(args.entry, args.timeline_ids)
        write_result(result, oprot, 'remove', seqid)
      end

      def process_get(seqid, iprot, oprot)
        args = read_args(iprot, Get_args)
        result = Get_result.new()
        result.success = @handler.get(args.timeline_id, args.offset, args.length)
        write_result(result, oprot, 'get', seqid)
      end

      def process_get_range(seqid, iprot, oprot)
        args = read_args(iprot, Get_range_args)
        result = Get_range_result.new()
        result.success = @handler.get_range(args.timeline_id, args.from_id, args.to_id)
        write_result(result, oprot, 'get_range', seqid)
      end

      def process_store(seqid, iprot, oprot)
        args = read_args(iprot, Store_args)
        result = Store_result.new()
        @handler.store(args.timeline_id, args.entries)
        write_result(result, oprot, 'store', seqid)
      end

      def process_merge(seqid, iprot, oprot)
        args = read_args(iprot, Merge_args)
        result = Merge_result.new()
        @handler.merge(args.timeline_id, args.entries)
        write_result(result, oprot, 'merge', seqid)
      end

      def process_unmerge(seqid, iprot, oprot)
        args = read_args(iprot, Unmerge_args)
        result = Unmerge_result.new()
        @handler.unmerge(args.timeline_id, args.entries)
        write_result(result, oprot, 'unmerge', seqid)
      end

      def process_delete_timeline(seqid, iprot, oprot)
        args = read_args(iprot, Delete_timeline_args)
        result = Delete_timeline_result.new()
        @handler.delete_timeline(args.timeline_id)
        write_result(result, oprot, 'delete_timeline', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Append_args
      include ::Thrift::Struct
      ENTRY = 1
      TIMELINE_IDS = 2

      ::Thrift::Struct.field_accessor self, :entry, :timeline_ids
      FIELDS = {
        ENTRY => {:type => ::Thrift::Types::STRING, :name => 'entry'},
        TIMELINE_IDS => {:type => ::Thrift::Types::LIST, :name => 'timeline_ids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Append_result
      include ::Thrift::Struct

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Remove_args
      include ::Thrift::Struct
      ENTRY = 1
      TIMELINE_IDS = 2

      ::Thrift::Struct.field_accessor self, :entry, :timeline_ids
      FIELDS = {
        ENTRY => {:type => ::Thrift::Types::STRING, :name => 'entry'},
        TIMELINE_IDS => {:type => ::Thrift::Types::LIST, :name => 'timeline_ids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Remove_result
      include ::Thrift::Struct

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Get_args
      include ::Thrift::Struct
      TIMELINE_ID = 1
      OFFSET = 2
      LENGTH = 3

      ::Thrift::Struct.field_accessor self, :timeline_id, :offset, :length
      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'},
        LENGTH => {:type => ::Thrift::Types::I32, :name => 'length'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Get_result
      include ::Thrift::Struct
      SUCCESS = 0

      ::Thrift::Struct.field_accessor self, :success
      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Get_range_args
      include ::Thrift::Struct
      TIMELINE_ID = 1
      FROM_ID = 2
      TO_ID = 3

      ::Thrift::Struct.field_accessor self, :timeline_id, :from_id, :to_id
      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        FROM_ID => {:type => ::Thrift::Types::I64, :name => 'from_id'},
        TO_ID => {:type => ::Thrift::Types::I64, :name => 'to_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Get_range_result
      include ::Thrift::Struct
      SUCCESS = 0

      ::Thrift::Struct.field_accessor self, :success
      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Store_args
      include ::Thrift::Struct
      TIMELINE_ID = 1
      ENTRIES = 2

      ::Thrift::Struct.field_accessor self, :timeline_id, :entries
      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        ENTRIES => {:type => ::Thrift::Types::LIST, :name => 'entries', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Store_result
      include ::Thrift::Struct

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Merge_args
      include ::Thrift::Struct
      TIMELINE_ID = 1
      ENTRIES = 2

      ::Thrift::Struct.field_accessor self, :timeline_id, :entries
      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        ENTRIES => {:type => ::Thrift::Types::LIST, :name => 'entries', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Merge_result
      include ::Thrift::Struct

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Unmerge_args
      include ::Thrift::Struct
      TIMELINE_ID = 1
      ENTRIES = 2

      ::Thrift::Struct.field_accessor self, :timeline_id, :entries
      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        ENTRIES => {:type => ::Thrift::Types::LIST, :name => 'entries', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Unmerge_result
      include ::Thrift::Struct

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Delete_timeline_args
      include ::Thrift::Struct
      TIMELINE_ID = 1

      ::Thrift::Struct.field_accessor self, :timeline_id
      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

    end

    class Delete_timeline_result
      include ::Thrift::Struct

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

    end
  end
end


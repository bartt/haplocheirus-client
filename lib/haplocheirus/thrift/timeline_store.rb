#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'haplocheirus/thrift/timeline_store_types'

module Haplocheirus
  module TimelineStore
    class Client
      include ::Thrift::Client

      def append(entry, timeline_prefix, timeline_ids)
        send_append(entry, timeline_prefix, timeline_ids)
        recv_append()
      end

      def send_append(entry, timeline_prefix, timeline_ids)
        send_message('append', Append_args, :entry => entry, :timeline_prefix => timeline_prefix, :timeline_ids => timeline_ids)
      end

      def recv_append()
        result = receive_message(Append_result)
        raise result.ex unless result.ex.nil?
        return
      end

      def remove(entry, timeline_prefix, timeline_ids)
        send_remove(entry, timeline_prefix, timeline_ids)
        recv_remove()
      end

      def send_remove(entry, timeline_prefix, timeline_ids)
        send_message('remove', Remove_args, :entry => entry, :timeline_prefix => timeline_prefix, :timeline_ids => timeline_ids)
      end

      def recv_remove()
        result = receive_message(Remove_result)
        raise result.ex unless result.ex.nil?
        return
      end

      def filter(timeline_id, entries, max_search)
        send_filter(timeline_id, entries, max_search)
        return recv_filter()
      end

      def send_filter(timeline_id, entries, max_search)
        send_message('filter', Filter_args, :timeline_id => timeline_id, :entries => entries, :max_search => max_search)
      end

      def recv_filter()
        result = receive_message(Filter_result)
        return result.success unless result.success.nil?
        raise result.ex unless result.ex.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'filter failed: unknown result')
      end

      def filter2(timeline_id, id, max_search)
        send_filter2(timeline_id, id, max_search)
        return recv_filter2()
      end

      def send_filter2(timeline_id, id, max_search)
        send_message('filter2', Filter2_args, :timeline_id => timeline_id, :id => id, :max_search => max_search)
      end

      def recv_filter2()
        result = receive_message(Filter2_result)
        return result.success unless result.success.nil?
        raise result.ex unless result.ex.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'filter2 failed: unknown result')
      end

      def get(timeline_id, offset, length, dedupe)
        send_get(timeline_id, offset, length, dedupe)
        return recv_get()
      end

      def send_get(timeline_id, offset, length, dedupe)
        send_message('get', Get_args, :timeline_id => timeline_id, :offset => offset, :length => length, :dedupe => dedupe)
      end

      def recv_get()
        result = receive_message(Get_result)
        return result.success unless result.success.nil?
        raise result.ex unless result.ex.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get failed: unknown result')
      end

      def get_multi(gets)
        send_get_multi(gets)
        return recv_get_multi()
      end

      def send_get_multi(gets)
        send_message('get_multi', Get_multi_args, :gets => gets)
      end

      def recv_get_multi()
        result = receive_message(Get_multi_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_multi failed: unknown result')
      end

      def get_range(timeline_id, from_id, to_id, dedupe)
        send_get_range(timeline_id, from_id, to_id, dedupe)
        return recv_get_range()
      end

      def send_get_range(timeline_id, from_id, to_id, dedupe)
        send_message('get_range', Get_range_args, :timeline_id => timeline_id, :from_id => from_id, :to_id => to_id, :dedupe => dedupe)
      end

      def recv_get_range()
        result = receive_message(Get_range_result)
        return result.success unless result.success.nil?
        raise result.ex unless result.ex.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_range failed: unknown result')
      end

      def get_range_multi(get_ranges)
        send_get_range_multi(get_ranges)
        return recv_get_range_multi()
      end

      def send_get_range_multi(get_ranges)
        send_message('get_range_multi', Get_range_multi_args, :get_ranges => get_ranges)
      end

      def recv_get_range_multi()
        result = receive_message(Get_range_multi_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_range_multi failed: unknown result')
      end

      def store(timeline_id, entries)
        send_store(timeline_id, entries)
        recv_store()
      end

      def send_store(timeline_id, entries)
        send_message('store', Store_args, :timeline_id => timeline_id, :entries => entries)
      end

      def recv_store()
        result = receive_message(Store_result)
        raise result.ex unless result.ex.nil?
        return
      end

      def merge(timeline_id, entries)
        send_merge(timeline_id, entries)
        recv_merge()
      end

      def send_merge(timeline_id, entries)
        send_message('merge', Merge_args, :timeline_id => timeline_id, :entries => entries)
      end

      def recv_merge()
        result = receive_message(Merge_result)
        raise result.ex unless result.ex.nil?
        return
      end

      def unmerge(timeline_id, entries)
        send_unmerge(timeline_id, entries)
        recv_unmerge()
      end

      def send_unmerge(timeline_id, entries)
        send_message('unmerge', Unmerge_args, :timeline_id => timeline_id, :entries => entries)
      end

      def recv_unmerge()
        result = receive_message(Unmerge_result)
        raise result.ex unless result.ex.nil?
        return
      end

      def merge_indirect(dest_timeline_id, source_timeline_id)
        send_merge_indirect(dest_timeline_id, source_timeline_id)
        return recv_merge_indirect()
      end

      def send_merge_indirect(dest_timeline_id, source_timeline_id)
        send_message('merge_indirect', Merge_indirect_args, :dest_timeline_id => dest_timeline_id, :source_timeline_id => source_timeline_id)
      end

      def recv_merge_indirect()
        result = receive_message(Merge_indirect_result)
        return result.success unless result.success.nil?
        raise result.ex unless result.ex.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'merge_indirect failed: unknown result')
      end

      def unmerge_indirect(dest_timeline_id, source_timeline_id)
        send_unmerge_indirect(dest_timeline_id, source_timeline_id)
        return recv_unmerge_indirect()
      end

      def send_unmerge_indirect(dest_timeline_id, source_timeline_id)
        send_message('unmerge_indirect', Unmerge_indirect_args, :dest_timeline_id => dest_timeline_id, :source_timeline_id => source_timeline_id)
      end

      def recv_unmerge_indirect()
        result = receive_message(Unmerge_indirect_result)
        return result.success unless result.success.nil?
        raise result.ex unless result.ex.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'unmerge_indirect failed: unknown result')
      end

      def delete_timeline(timeline_id)
        send_delete_timeline(timeline_id)
        recv_delete_timeline()
      end

      def send_delete_timeline(timeline_id)
        send_message('delete_timeline', Delete_timeline_args, :timeline_id => timeline_id)
      end

      def recv_delete_timeline()
        result = receive_message(Delete_timeline_result)
        raise result.ex unless result.ex.nil?
        return
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_append(seqid, iprot, oprot)
        args = read_args(iprot, Append_args)
        result = Append_result.new()
        begin
          @handler.append(args.entry, args.timeline_prefix, args.timeline_ids)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'append', seqid)
      end

      def process_remove(seqid, iprot, oprot)
        args = read_args(iprot, Remove_args)
        result = Remove_result.new()
        begin
          @handler.remove(args.entry, args.timeline_prefix, args.timeline_ids)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'remove', seqid)
      end

      def process_filter(seqid, iprot, oprot)
        args = read_args(iprot, Filter_args)
        result = Filter_result.new()
        begin
          result.success = @handler.filter(args.timeline_id, args.entries, args.max_search)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'filter', seqid)
      end

      def process_filter2(seqid, iprot, oprot)
        args = read_args(iprot, Filter2_args)
        result = Filter2_result.new()
        begin
          result.success = @handler.filter2(args.timeline_id, args.id, args.max_search)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'filter2', seqid)
      end

      def process_get(seqid, iprot, oprot)
        args = read_args(iprot, Get_args)
        result = Get_result.new()
        begin
          result.success = @handler.get(args.timeline_id, args.offset, args.length, args.dedupe)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'get', seqid)
      end

      def process_get_multi(seqid, iprot, oprot)
        args = read_args(iprot, Get_multi_args)
        result = Get_multi_result.new()
        result.success = @handler.get_multi(args.gets)
        write_result(result, oprot, 'get_multi', seqid)
      end

      def process_get_range(seqid, iprot, oprot)
        args = read_args(iprot, Get_range_args)
        result = Get_range_result.new()
        begin
          result.success = @handler.get_range(args.timeline_id, args.from_id, args.to_id, args.dedupe)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'get_range', seqid)
      end

      def process_get_range_multi(seqid, iprot, oprot)
        args = read_args(iprot, Get_range_multi_args)
        result = Get_range_multi_result.new()
        result.success = @handler.get_range_multi(args.get_ranges)
        write_result(result, oprot, 'get_range_multi', seqid)
      end

      def process_store(seqid, iprot, oprot)
        args = read_args(iprot, Store_args)
        result = Store_result.new()
        begin
          @handler.store(args.timeline_id, args.entries)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'store', seqid)
      end

      def process_merge(seqid, iprot, oprot)
        args = read_args(iprot, Merge_args)
        result = Merge_result.new()
        begin
          @handler.merge(args.timeline_id, args.entries)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'merge', seqid)
      end

      def process_unmerge(seqid, iprot, oprot)
        args = read_args(iprot, Unmerge_args)
        result = Unmerge_result.new()
        begin
          @handler.unmerge(args.timeline_id, args.entries)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'unmerge', seqid)
      end

      def process_merge_indirect(seqid, iprot, oprot)
        args = read_args(iprot, Merge_indirect_args)
        result = Merge_indirect_result.new()
        begin
          result.success = @handler.merge_indirect(args.dest_timeline_id, args.source_timeline_id)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'merge_indirect', seqid)
      end

      def process_unmerge_indirect(seqid, iprot, oprot)
        args = read_args(iprot, Unmerge_indirect_args)
        result = Unmerge_indirect_result.new()
        begin
          result.success = @handler.unmerge_indirect(args.dest_timeline_id, args.source_timeline_id)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'unmerge_indirect', seqid)
      end

      def process_delete_timeline(seqid, iprot, oprot)
        args = read_args(iprot, Delete_timeline_args)
        result = Delete_timeline_result.new()
        begin
          @handler.delete_timeline(args.timeline_id)
        rescue Haplocheirus::TimelineStoreException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'delete_timeline', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Append_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTRY = 1
      TIMELINE_PREFIX = 2
      TIMELINE_IDS = 3

      FIELDS = {
        ENTRY => {:type => ::Thrift::Types::STRING, :name => 'entry', :binary => true},
        TIMELINE_PREFIX => {:type => ::Thrift::Types::STRING, :name => 'timeline_prefix'},
        TIMELINE_IDS => {:type => ::Thrift::Types::LIST, :name => 'timeline_ids', :element => {:type => ::Thrift::Types::I64}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Append_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EX = 1

      FIELDS = {
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Remove_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTRY = 1
      TIMELINE_PREFIX = 2
      TIMELINE_IDS = 3

      FIELDS = {
        ENTRY => {:type => ::Thrift::Types::STRING, :name => 'entry', :binary => true},
        TIMELINE_PREFIX => {:type => ::Thrift::Types::STRING, :name => 'timeline_prefix'},
        TIMELINE_IDS => {:type => ::Thrift::Types::LIST, :name => 'timeline_ids', :element => {:type => ::Thrift::Types::I64}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Remove_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EX = 1

      FIELDS = {
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Filter_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TIMELINE_ID = 1
      ENTRIES = 2
      MAX_SEARCH = 3

      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        ENTRIES => {:type => ::Thrift::Types::LIST, :name => 'entries', :element => {:type => ::Thrift::Types::STRING, :binary => true}},
        MAX_SEARCH => {:type => ::Thrift::Types::I32, :name => 'max_search'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Filter_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      EX = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING, :binary => true}},
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Filter2_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TIMELINE_ID = 1
      ID = 2
      MAX_SEARCH = 3

      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        ID => {:type => ::Thrift::Types::LIST, :name => 'id', :element => {:type => ::Thrift::Types::I64}},
        MAX_SEARCH => {:type => ::Thrift::Types::I32, :name => 'max_search'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Filter2_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      EX = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING, :binary => true}},
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TIMELINE_ID = 1
      OFFSET = 2
      LENGTH = 3
      DEDUPE = 4

      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'},
        LENGTH => {:type => ::Thrift::Types::I32, :name => 'length'},
        DEDUPE => {:type => ::Thrift::Types::BOOL, :name => 'dedupe'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      EX = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Haplocheirus::TimelineSegment},
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_multi_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GETS = 1

      FIELDS = {
        GETS => {:type => ::Thrift::Types::LIST, :name => 'gets', :element => {:type => ::Thrift::Types::STRUCT, :class => Haplocheirus::TimelineGet}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_multi_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Haplocheirus::TimelineSegment}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_range_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TIMELINE_ID = 1
      FROM_ID = 2
      TO_ID = 3
      DEDUPE = 4

      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        FROM_ID => {:type => ::Thrift::Types::I64, :name => 'from_id'},
        TO_ID => {:type => ::Thrift::Types::I64, :name => 'to_id'},
        DEDUPE => {:type => ::Thrift::Types::BOOL, :name => 'dedupe'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_range_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      EX = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Haplocheirus::TimelineSegment},
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_range_multi_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GET_RANGES = 1

      FIELDS = {
        GET_RANGES => {:type => ::Thrift::Types::LIST, :name => 'get_ranges', :element => {:type => ::Thrift::Types::STRUCT, :class => Haplocheirus::TimelineGetRange}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_range_multi_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Haplocheirus::TimelineSegment}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Store_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TIMELINE_ID = 1
      ENTRIES = 2

      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        ENTRIES => {:type => ::Thrift::Types::LIST, :name => 'entries', :element => {:type => ::Thrift::Types::STRING, :binary => true}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Store_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EX = 1

      FIELDS = {
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Merge_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TIMELINE_ID = 1
      ENTRIES = 2

      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        ENTRIES => {:type => ::Thrift::Types::LIST, :name => 'entries', :element => {:type => ::Thrift::Types::STRING, :binary => true}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Merge_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EX = 1

      FIELDS = {
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Unmerge_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TIMELINE_ID = 1
      ENTRIES = 2

      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'},
        ENTRIES => {:type => ::Thrift::Types::LIST, :name => 'entries', :element => {:type => ::Thrift::Types::STRING, :binary => true}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Unmerge_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EX = 1

      FIELDS = {
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Merge_indirect_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DEST_TIMELINE_ID = 1
      SOURCE_TIMELINE_ID = 2

      FIELDS = {
        DEST_TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'dest_timeline_id'},
        SOURCE_TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'source_timeline_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Merge_indirect_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      EX = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Unmerge_indirect_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DEST_TIMELINE_ID = 1
      SOURCE_TIMELINE_ID = 2

      FIELDS = {
        DEST_TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'dest_timeline_id'},
        SOURCE_TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'source_timeline_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Unmerge_indirect_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      EX = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Delete_timeline_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TIMELINE_ID = 1

      FIELDS = {
        TIMELINE_ID => {:type => ::Thrift::Types::STRING, :name => 'timeline_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Delete_timeline_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EX = 1

      FIELDS = {
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Haplocheirus::TimelineStoreException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
